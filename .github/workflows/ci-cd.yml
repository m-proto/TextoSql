name: TextToSQL CI/CD

# Quand déclencher le workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Variables d'environnement globales
env:
  PYTHON_VERSION: '3.11'

# Les étapes du workflow
jobs:
  # Job 1: Tests et validation
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Étape 1: Récupérer le code
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    # Étape 2: Installer Python
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    # Étape 3: Cache des dépendances (pour aller plus vite)
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Étape 4: Installer les dépendances
    - name: 📚 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Dependencies installed"
    
    # Étape 5: Test des imports (le plus important)
    - name: 🧪 Test imports
      run: |
        echo "🔍 Testing all imports..."
        python test_imports.py
        echo "✅ All imports successful"
    
    # Étape 6: Vérification de la syntaxe
    - name: 🔍 Syntax check
      run: |
        echo "📝 Checking Python syntax..."
        python -m py_compile api.py
        python -m py_compile core/*.py
        echo "✅ Syntax check passed"
    
    # Étape 7: Test de démarrage API (sans DB)
    - name: 🚀 Test API structure
      run: |
        echo "🧪 Testing API structure..."
        python -c "
from api import app
from fastapi.testclient import TestClient
print('✅ API structure is valid')
print(f'✅ App title: {app.title}')
print(f'✅ API version: {app.version}')
"
    
    # Étape 8: Vérification des endpoints
    - name: 🔗 Check endpoints
      run: |
        echo "🔍 Checking API endpoints..."
        python -c "
from api import app
routes = [route.path for route in app.routes if hasattr(route, 'path')]
print('✅ API endpoints found:')
for route in routes:
    print(f'  - {route}')
"
    
    # Étape 9: Test de sécurité basique
    - name: 🛡️ Security check
      run: |
        echo "🔒 Basic security check..."
        python -c "
import os
# Vérifier qu'il n'y a pas de credentials hardcodés
with open('api.py', 'r') as f:
    content = f.read()
    if 'k_shiraishi' in content or 'Eb{T~Dbk' in content:
        print('❌ Hardcoded credentials found!')
        exit(1)
    else:
        print('✅ No hardcoded credentials found')
"

  # Job 2: Build et déploiement (seulement si tests passent)
  deploy:
    needs: test  # Attend que le job 'test' soit terminé avec succès
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Seulement sur main
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3
    
    - name: 🚀 Deploy to Render
      run: |
        echo "🎉 Tests passed! Deploying to Render..."
        echo "📡 Render will automatically deploy from main branch"
        echo "🔗 Your API will be available at: https://textosql-api.onrender.com"
    
    # Étape optionnelle: Attendre et tester le déploiement
    - name: ⏳ Wait for deployment
      run: |
        echo "⏳ Waiting for Render deployment..."
        sleep 60
    
    - name: 🏥 Health check after deployment
      run: |
        echo "🏥 Testing deployed API..."
        # Remplacez par votre vraie URL Render quand vous l'aurez
        echo "curl -f https://textosql-api.onrender.com/health"
        echo "✅ Deployment health check (simulated)"
    
    - name: 📧 Notify success
      run: |
        echo "🎉 Deployment successful!"
        echo "📊 Your API is live and ready to use!"
