name: Quality Gates & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 bandit black isort pre-commit
        
    - name: 🔍 Check for hardcoded credentials
      run: |
        echo "🔍 Vérification des credentials hardcodés..."
        if grep -r "k_shiraishi\|Eb{T~Dbk\|AIzaSyAeLDdZnjY" . --exclude-dir=.git --exclude-dir=.github || true; then
          echo "⚠️  ATTENTION: Credentials trouvés dans le code!"
          echo "❌ Utilisez des variables d'environnement à la place"
          exit 1
        else
          echo "✅ Aucun credential hardcodé trouvé"
        fi
        
    - name: 🎨 Code formatting check
      run: |
        echo "🎨 Vérification du formatage..."
        black --check . || (echo "❌ Code mal formaté. Lancez: black ." && exit 1)
        isort --check-only . || (echo "❌ Imports mal triés. Lancez: isort ." && exit 1)
        echo "✅ Code bien formaté"
        
    - name: 🔍 Lint check
      run: |
        echo "🔍 Vérification du code..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "✅ Code propre"
        
    - name: 🛡️ Security scan
      run: |
        echo "🛡️ Scan de sécurité..."
        bandit -r core/ -f json -o security-report.json || true
        bandit -r core/ || true
        echo "✅ Scan sécurité terminé"
        
    - name: 🧪 Import tests
      run: |
        echo "🧪 Test des imports..."
        python test_imports.py
        echo "✅ Tous les imports fonctionnent"
        
    - name: 🧪 Unit tests
      run: |
        echo "🧪 Tests unitaires..."
        python -m pytest tests/ -v || echo "⚠️  Tests unitaires à implémenter"
        
    - name: 📊 Generate report
      run: |
        echo "📊 Génération du rapport de qualité..."
        echo "✅ Quality Gates passées avec succès!"

  deploy-staging:
    needs: quality-gates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 🚀 Deploy to Staging
      run: |
        echo "🚀 Déploiement vers STAGING..."
        echo "📡 Staging URL: ${{ secrets.STAGING_URL }}"
        echo "✅ Déploiement staging terminé"
        
    - name: 🏥 Staging Health Check
      run: |
        echo "🏥 Vérification santé staging..."
        sleep 30
        curl -f "${{ secrets.STAGING_URL }}/health" || echo "⚠️  Health check staging échoué"
        
    - name: 🧪 Integration Tests on Staging
      run: |
        echo "🧪 Tests d'intégration sur staging..."
        python -c "
import requests
import json

url = '${{ secrets.STAGING_URL }}'
print(f'🔗 Testing staging: {url}')

try:
    # Test health
    response = requests.get(f'{url}/health', timeout=10)
    print(f'Health: {response.status_code}')
    
    # Test SQL generation
    test_data = {'question': 'Combien de voitures?'}
    response = requests.post(f'{url}/ask', json=test_data, timeout=30)
    print(f'SQL Gen: {response.status_code}')
    
    print('✅ Tests staging OK')
except Exception as e:
    print(f'⚠️  Staging test failed: {e}')
"

  deploy-production:
    needs: quality-gates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Déploiement vers PRODUCTION..."
        echo "📡 Production URL: ${{ secrets.PRODUCTION_URL }}"
        echo "✅ Render déploie automatiquement depuis main"
        
    - name: 🏥 Production Health Check
      run: |
        echo "🏥 Vérification santé production..."
        sleep 60
        curl -f "${{ secrets.PRODUCTION_URL }}/health" || echo "⚠️  Health check production échoué"
        
    - name: 🔥 Smoke Tests Production
      run: |
        echo "🔥 Tests de fumée production..."
        python -c "
import requests
import json

url = '${{ secrets.PRODUCTION_URL }}'
print(f'🔗 Testing production: {url}')

try:
    # Test health
    response = requests.get(f'{url}/health', timeout=10)
    assert response.status_code == 200
    print('✅ Health check OK')
    
    # Test metrics
    response = requests.get(f'{url}/metrics', timeout=10)
    assert response.status_code == 200
    print('✅ Metrics OK')
    
    # Test SQL generation
    test_data = {'question': 'Combien de voitures dans la base?'}
    response = requests.post(f'{url}/ask', json=test_data, timeout=30)
    assert response.status_code == 200
    print('✅ SQL generation OK')
    
    print('🎉 Tous les tests de fumée passent!')
except Exception as e:
    print(f'❌ Production test failed: {e}')
    exit(1)
"
        
    - name: 📧 Success Notification
      run: |
        echo "🎉 Déploiement production réussi!"
        echo "🔗 API disponible: ${{ secrets.PRODUCTION_URL }}"
        echo "📊 Metrics: ${{ secrets.PRODUCTION_URL }}/metrics"
